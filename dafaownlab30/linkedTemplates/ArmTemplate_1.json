{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dafaownlab30"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_configuracion_parametros')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_source_devvertixddnsnet_Configuracion",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Datalake"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Codigo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Clave",
						"type": "varchar"
					},
					{
						"name": "Valor",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Parametros"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_bikestore_production_brands')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObtenerParametros",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE\r\n\t@FechaInicio DATE\r\n\t,@FechaFin DATE\r\n\t,@DiasBorrarCargar INT\r\n\t,@Contenedor VARCHAR(5)\r\n\t,@MedallaBronce VARCHAR(25)\r\n\r\nSELECT @FechaFin = MAX(Valor) FROM dbo.Parametros WHERE Clave = 'FechaProceso';\r\nSELECT @DiasBorrarCargar = (MAX(Valor) * -1) FROM dbo.Parametros WHERE Clave = 'DiasCargarBorrar';\r\nSELECT TOP 1 @Contenedor = Valor FROM dbo.Parametros WHERE Clave = 'ContenedorLagoDatosReg' ORDER BY Codigo ASC;\r\nSELECT TOP 1 @MedallaBronce = Valor FROM dbo.Parametros WHERE Clave = 'MedallaBronce' ORDER BY Codigo ASC;\r\nSET @FechaInicio = DATEADD(DAY, @DiasBorrarCargar, @FechaFin)\r\n\r\nDECLARE @TablaTemporal TABLE (FechaProceso DATE, Contenedor VARCHAR(5), Medalla VARCHAR(25));\r\n\r\nWHILE @FechaInicio <= @FechaFin \r\nBEGIN \r\n\t\r\n\tINSERT INTO @TablaTemporal \r\n\tVALUES (@FechaInicio, @Contenedor, @MedallaBronce);\r\n\r\n\tSET @FechaInicio = DATEADD(DAY, 1, @FechaInicio);\r\n\r\nEND \r\n\r\nSELECT FechaProceso, Contenedor, Medalla FROM @TablaTemporal;\r\n",
								"queryTimeout": "00:20:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_configuracion_parametros",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RecorrerDias",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ObtenerParametros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ObtenerParametros').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "IngestaDatos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "00:20:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"validateDataConsistency": false,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "brand_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "brand_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "brand_name",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "brand_name",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_bikestores_production_brands_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datalake_production_brands_parquet",
											"type": "DatasetReference",
											"parameters": {
												"FechaProceso": {
													"value": "@substring(item().FechaProceso, 0, 10)",
													"type": "Expression"
												},
												"Contenedor": {
													"value": "@item().Contenedor",
													"type": "Expression"
												},
												"MedallaBronce": {
													"value": "@item().Medalla",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze/pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_configuracion_parametros')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_bikestore_production_categories')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObtenerParametros",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE\r\n\t@FechaInicio DATE\r\n\t,@FechaFin DATE\r\n\t,@DiasBorrarCargar INT\r\n\t,@Contenedor VARCHAR(5)\r\n\t,@MedallaBronce VARCHAR(25)\r\n\r\nSELECT @FechaFin = MAX(Valor) FROM dbo.Parametros WHERE Clave = 'FechaProceso';\r\nSELECT @DiasBorrarCargar = (MAX(Valor) * -1) FROM dbo.Parametros WHERE Clave = 'DiasCargarBorrar';\r\nSELECT TOP 1 @Contenedor = Valor FROM dbo.Parametros WHERE Clave = 'ContenedorLagoDatosReg' ORDER BY Codigo ASC;\r\nSELECT TOP 1 @MedallaBronce = Valor FROM dbo.Parametros WHERE Clave = 'MedallaBronce' ORDER BY Codigo ASC;\r\nSET @FechaInicio = DATEADD(DAY, @DiasBorrarCargar, @FechaFin)\r\n\r\nDECLARE @TablaTemporal TABLE (FechaProceso DATE, Contenedor VARCHAR(5), Medalla VARCHAR(25));\r\n\r\nWHILE @FechaInicio <= @FechaFin \r\nBEGIN \r\n\t\r\n\tINSERT INTO @TablaTemporal \r\n\tVALUES (@FechaInicio, @Contenedor, @MedallaBronce);\r\n\r\n\tSET @FechaInicio = DATEADD(DAY, 1, @FechaInicio);\r\n\r\nEND \r\n\r\nSELECT FechaProceso, Contenedor, Medalla FROM @TablaTemporal;",
								"queryTimeout": "00:20:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_configuracion_parametros",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RecorrerFechas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ObtenerParametros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ObtenerParametros').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "IngestaDatos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "00:20:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "category_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "category_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "category_name",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "category_name",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_bikestores_production_categories_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datalake_production_categories_parquet",
											"type": "DatasetReference",
											"parameters": {
												"FechaProceso": {
													"value": "@substring(item().FechaProceso, 0, 10)",
													"type": "Expression"
												},
												"Contenedor": {
													"value": "@item().Contenedor",
													"type": "Expression"
												},
												"MedallaBronce": {
													"value": "@item().Medalla",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze/pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_configuracion_parametros')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_bikestore_production_products_daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObtenerParametros",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE\r\n\t@FechaInicio DATE\r\n\t,@FechaFin DATE\r\n\t,@DiasBorrarCargar INT\r\n\t,@Contenedor VARCHAR(5)\r\n\t,@MedallaBronce VARCHAR(25)\r\n\r\nSELECT @FechaFin = MAX(Valor) FROM dbo.Parametros WHERE Clave = 'FechaProceso';\r\nSELECT @DiasBorrarCargar = (MAX(Valor) * -1) FROM dbo.Parametros WHERE Clave = 'DiasCargarBorrar';\r\nSELECT TOP 1 @Contenedor = Valor FROM dbo.Parametros WHERE Clave = 'ContenedorLagoDatosReg' ORDER BY Codigo ASC;\r\nSELECT TOP 1 @MedallaBronce = Valor FROM dbo.Parametros WHERE Clave = 'MedallaBronce' ORDER BY Codigo ASC;\r\nSET @FechaInicio = DATEADD(DAY, @DiasBorrarCargar, @FechaFin)\r\n\r\nDECLARE @TablaTemporal TABLE (FechaProceso DATE, Contenedor VARCHAR(5), Medalla VARCHAR(25));\r\n\r\nWHILE @FechaInicio <= @FechaFin \r\nBEGIN \r\n\t\r\n\tINSERT INTO @TablaTemporal \r\n\tVALUES (@FechaInicio, @Contenedor, @MedallaBronce);\r\n\r\n\tSET @FechaInicio = DATEADD(DAY, 1, @FechaInicio);\r\n\r\nEND \r\n\r\nSELECT FechaProceso, Contenedor, Medalla FROM @TablaTemporal;\r\n",
								"queryTimeout": "00:20:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_configuracion_parametros",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RecorrerFechas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ObtenerParametros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ObtenerParametros').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "IngestaDatos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "00:20:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "product_name",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "product_name",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "brand_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "brand_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "category_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "category_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "model_year",
														"type": "Int16",
														"physicalType": "smallint"
													},
													"sink": {
														"name": "model_year",
														"type": "Int16",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "list_price",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "list_price",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_bikestores_production_products_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datalake_production_products_parquet",
											"type": "DatasetReference",
											"parameters": {
												"FechaProceso": {
													"value": "@substring(item().FechaProceso, 0, 10)",
													"type": "Expression"
												},
												"Contenedor": {
													"value": "@item().Contenedor",
													"type": "Expression"
												},
												"MedallaBronce": {
													"value": "@item().Medalla",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze/pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_configuracion_parametros')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_bikestore_sales_customers_daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObtenerParametros",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE\r\n\t@FechaInicio DATE\r\n\t,@FechaFin DATE\r\n\t,@DiasBorrarCargar INT\r\n\t,@Contenedor VARCHAR(5)\r\n\t,@MedallaBronce VARCHAR(25)\r\n\r\nSELECT @FechaFin = MAX(Valor) FROM dbo.Parametros WHERE Clave = 'FechaProceso';\r\nSELECT @DiasBorrarCargar = (MAX(Valor) * -1) FROM dbo.Parametros WHERE Clave = 'DiasCargarBorrar';\r\nSELECT TOP 1 @Contenedor = Valor FROM dbo.Parametros WHERE Clave = 'ContenedorLagoDatosReg' ORDER BY Codigo ASC;\r\nSELECT TOP 1 @MedallaBronce = Valor FROM dbo.Parametros WHERE Clave = 'MedallaBronce' ORDER BY Codigo ASC;\r\nSET @FechaInicio = DATEADD(DAY, @DiasBorrarCargar, @FechaFin)\r\n\r\nDECLARE @TablaTemporal TABLE (FechaProceso DATE, Contenedor VARCHAR(5), Medalla VARCHAR(25));\r\n\r\nWHILE @FechaInicio <= @FechaFin \r\nBEGIN \r\n\t\r\n\tINSERT INTO @TablaTemporal \r\n\tVALUES (@FechaInicio, @Contenedor, @MedallaBronce);\r\n\r\n\tSET @FechaInicio = DATEADD(DAY, 1, @FechaInicio);\r\n\r\nEND \r\n\r\nSELECT FechaProceso, Contenedor, Medalla FROM @TablaTemporal;",
								"queryTimeout": "00:20:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_configuracion_parametros",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RecorrerFechas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ObtenerParametros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ObtenerParametros').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "IngestaDatos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "00:20:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "customer_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "customer_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "first_name",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "first_name",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "last_name",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "last_name",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "phone",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "phone",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "email",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "email",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "street",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "street",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "city",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "city",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "state",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "state",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "zip_code",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "zip_code",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_bikestores_sales_customers_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datalake_sales_customers_parquet",
											"type": "DatasetReference",
											"parameters": {
												"FechaProceso": {
													"value": "@substring(item().FechaProceso, 0, 10)",
													"type": "Expression"
												},
												"Contenedor": {
													"value": "@item().Contenedor",
													"type": "Expression"
												},
												"MedallaBronce": {
													"value": "@item().Medalla",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze/pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_configuracion_parametros')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_bikestore_sales_order_items_daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObtenerParametros",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE\r\n\t@FechaInicio DATE\r\n\t,@FechaFin DATE\r\n\t,@DiasBorrarCargar INT\r\n\t,@Contenedor VARCHAR(5)\r\n\t,@MedallaBronce VARCHAR(25)\r\n\r\nSELECT @FechaFin = MAX(Valor) FROM dbo.Parametros WHERE Clave = 'FechaProceso';\r\nSELECT @DiasBorrarCargar = (MAX(Valor) * -1) FROM dbo.Parametros WHERE Clave = 'DiasCargarBorrar';\r\nSELECT TOP 1 @Contenedor = Valor FROM dbo.Parametros WHERE Clave = 'ContenedorLagoDatosReg' ORDER BY Codigo ASC;\r\nSELECT TOP 1 @MedallaBronce = Valor FROM dbo.Parametros WHERE Clave = 'MedallaBronce' ORDER BY Codigo ASC;\r\nSET @FechaInicio = DATEADD(DAY, @DiasBorrarCargar, @FechaFin)\r\n\r\nDECLARE @TablaTemporal TABLE (FechaProceso DATE, Contenedor VARCHAR(5), Medalla VARCHAR(25));\r\n\r\nWHILE @FechaInicio <= @FechaFin \r\nBEGIN \r\n\t\r\n\tINSERT INTO @TablaTemporal \r\n\tVALUES (@FechaInicio, @Contenedor, @MedallaBronce);\r\n\r\n\tSET @FechaInicio = DATEADD(DAY, 1, @FechaInicio);\r\n\r\nEND \r\n\r\nSELECT FechaProceso, Contenedor, Medalla FROM @TablaTemporal;",
								"queryTimeout": "00:20:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_configuracion_parametros",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RecorrerFechas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ObtenerParametros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ObtenerParametros').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "IngestaDatos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT \r\n\tA.order_id\r\n\t,A.item_id\r\n\t,A.product_id\r\n\t,A.quantity\r\n\t,A.list_price\r\n\t,A.discount\r\nFROM \r\n\tsales.order_items AS A \r\n\tINNER JOIN sales.orders AS B \r\n\t\tON A.order_id = B.order_id\r\nWHERE \r\n\tB.order_date >= CAST('@{item().FechaProceso}' AS DATETIME) \r\n\tAND B.order_date < DATEADD(DAY, 1, CAST('@{item().FechaProceso}' AS DATETIME))\r\n",
												"type": "Expression"
											},
											"queryTimeout": "00:20:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "order_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "order_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "item_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "item_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "product_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "quantity",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "quantity",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "list_price",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "list_price",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "discount",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 4
													},
													"sink": {
														"name": "discount",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_bikestores_sales_order_items_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datalake_sales_order_items_parquet",
											"type": "DatasetReference",
											"parameters": {
												"FechaProceso": {
													"value": "@substring(item().FechaProceso, 0, 10)",
													"type": "Expression"
												},
												"Contenedor": {
													"value": "@item().Contenedor",
													"type": "Expression"
												},
												"MedallaBronce": {
													"value": "@item().Medalla",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze/pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_configuracion_parametros')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_bikestore_sales_orders_daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObtenerParametros",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE\r\n\t@FechaInicio DATE\r\n\t,@FechaFin DATE\r\n\t,@DiasBorrarCargar INT\r\n\t,@Contenedor VARCHAR(5)\r\n\t,@MedallaBronce VARCHAR(25)\r\n\r\nSELECT @FechaFin = MAX(Valor) FROM dbo.Parametros WHERE Clave = 'FechaProceso';\r\nSELECT @DiasBorrarCargar = (MAX(Valor) * -1) FROM dbo.Parametros WHERE Clave = 'DiasCargarBorrar';\r\nSELECT TOP 1 @Contenedor = Valor FROM dbo.Parametros WHERE Clave = 'ContenedorLagoDatosReg' ORDER BY Codigo ASC;\r\nSELECT TOP 1 @MedallaBronce = Valor FROM dbo.Parametros WHERE Clave = 'MedallaBronce' ORDER BY Codigo ASC;\r\nSET @FechaInicio = DATEADD(DAY, @DiasBorrarCargar, @FechaFin)\r\n\r\nDECLARE @TablaTemporal TABLE (FechaProceso DATE, Contenedor VARCHAR(5), Medalla VARCHAR(25));\r\n\r\nWHILE @FechaInicio <= @FechaFin \r\nBEGIN \r\n\t\r\n\tINSERT INTO @TablaTemporal \r\n\tVALUES (@FechaInicio, @Contenedor, @MedallaBronce);\r\n\r\n\tSET @FechaInicio = DATEADD(DAY, 1, @FechaInicio);\r\n\r\nEND \r\n\r\nSELECT FechaProceso, Contenedor, Medalla FROM @TablaTemporal;",
								"queryTimeout": "00:20:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_configuracion_parametros",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RecorrerFechas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ObtenerParametros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ObtenerParametros').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "IngestaDatos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT \r\n\torder_id\r\n\t,customer_id\r\n\t,order_status\r\n\t,order_date\r\n\t,required_date\r\n\t,shipped_date\r\n\t,store_id\r\n\t,staff_id\r\nFROM \r\n\tsales.orders\r\nWHERE \r\n\torder_date >= CAST('@{item().FechaProceso}' AS DATETIME) \r\n\tAND order_date < DATEADD(DAY, 1, CAST('@{item().FechaProceso}' AS DATETIME))",
												"type": "Expression"
											},
											"queryTimeout": "00:20:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "order_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "order_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "customer_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "customer_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "order_status",
														"type": "Byte",
														"physicalType": "tinyint"
													},
													"sink": {
														"name": "order_status",
														"type": "Byte",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "order_date",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "order_date",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "required_date",
														"type": "DateTime",
														"physicalType": "date"
													},
													"sink": {
														"name": "required_date",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "shipped_date",
														"type": "DateTime",
														"physicalType": "date"
													},
													"sink": {
														"name": "shipped_date",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "store_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "store_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "staff_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "staff_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_bikestores_sales_orders_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datalake_sales_orders_parquet",
											"type": "DatasetReference",
											"parameters": {
												"FechaProceso": {
													"value": "@substring(item().FechaProceso, 0, 10)",
													"type": "Expression"
												},
												"Contenedor": {
													"value": "@item().Contenedor",
													"type": "Expression"
												},
												"MedallaBronce": {
													"value": "@item().Medalla",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze/pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_configuracion_parametros')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_bikestore_sales_staffs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObtenerParametros",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE\r\n\t@FechaInicio DATE\r\n\t,@FechaFin DATE\r\n\t,@DiasBorrarCargar INT\r\n\t,@Contenedor VARCHAR(5)\r\n\t,@MedallaBronce VARCHAR(25)\r\n\r\nSELECT @FechaFin = MAX(Valor) FROM dbo.Parametros WHERE Clave = 'FechaProceso';\r\nSELECT @DiasBorrarCargar = (MAX(Valor) * -1) FROM dbo.Parametros WHERE Clave = 'DiasCargarBorrar';\r\nSELECT TOP 1 @Contenedor = Valor FROM dbo.Parametros WHERE Clave = 'ContenedorLagoDatosReg' ORDER BY Codigo ASC;\r\nSELECT TOP 1 @MedallaBronce = Valor FROM dbo.Parametros WHERE Clave = 'MedallaBronce' ORDER BY Codigo ASC;\r\nSET @FechaInicio = DATEADD(DAY, @DiasBorrarCargar, @FechaFin)\r\n\r\nDECLARE @TablaTemporal TABLE (FechaProceso DATE, Contenedor VARCHAR(5), Medalla VARCHAR(25));\r\n\r\nWHILE @FechaInicio <= @FechaFin \r\nBEGIN \r\n\t\r\n\tINSERT INTO @TablaTemporal \r\n\tVALUES (@FechaInicio, @Contenedor, @MedallaBronce);\r\n\r\n\tSET @FechaInicio = DATEADD(DAY, 1, @FechaInicio);\r\n\r\nEND \r\n\r\nSELECT FechaProceso, Contenedor, Medalla FROM @TablaTemporal;",
								"queryTimeout": "00:20:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_configuracion_parametros",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RecorrerFechas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ObtenerParametros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ObtenerParametros').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "IngestaDatos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "00:20:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "staff_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "staff_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "first_name",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "first_name",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "last_name",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "last_name",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "email",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "email",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "phone",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "phone",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "active",
														"type": "Byte",
														"physicalType": "tinyint"
													},
													"sink": {
														"name": "active",
														"type": "Byte",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "store_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "store_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "manager_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "manager_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_bikestores_sales_staffs_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datalake_sales_staffs_parquet",
											"type": "DatasetReference",
											"parameters": {
												"FechaProceso": {
													"value": "@substring(item().FechaProceso, 0, 10)",
													"type": "Expression"
												},
												"Contenedor": {
													"value": "@item().Contenedor",
													"type": "Expression"
												},
												"MedallaBronce": {
													"value": "@item().Medalla",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze/pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_configuracion_parametros')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_bikestore_sales_stores')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ObtenerParametros",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE\r\n\t@FechaInicio DATE\r\n\t,@FechaFin DATE\r\n\t,@DiasBorrarCargar INT\r\n\t,@Contenedor VARCHAR(5)\r\n\t,@MedallaBronce VARCHAR(25)\r\n\r\nSELECT @FechaFin = MAX(Valor) FROM dbo.Parametros WHERE Clave = 'FechaProceso';\r\nSELECT @DiasBorrarCargar = (MAX(Valor) * -1) FROM dbo.Parametros WHERE Clave = 'DiasCargarBorrar';\r\nSELECT TOP 1 @Contenedor = Valor FROM dbo.Parametros WHERE Clave = 'ContenedorLagoDatosReg' ORDER BY Codigo ASC;\r\nSELECT TOP 1 @MedallaBronce = Valor FROM dbo.Parametros WHERE Clave = 'MedallaBronce' ORDER BY Codigo ASC;\r\nSET @FechaInicio = DATEADD(DAY, @DiasBorrarCargar, @FechaFin)\r\n\r\nDECLARE @TablaTemporal TABLE (FechaProceso DATE, Contenedor VARCHAR(5), Medalla VARCHAR(25));\r\n\r\nWHILE @FechaInicio <= @FechaFin \r\nBEGIN \r\n\t\r\n\tINSERT INTO @TablaTemporal \r\n\tVALUES (@FechaInicio, @Contenedor, @MedallaBronce);\r\n\r\n\tSET @FechaInicio = DATEADD(DAY, 1, @FechaInicio);\r\n\r\nEND \r\n\r\nSELECT FechaProceso, Contenedor, Medalla FROM @TablaTemporal;",
								"queryTimeout": "00:20:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_configuracion_parametros",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RecorrerFechas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ObtenerParametros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ObtenerParametros').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "IngestaDatos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "00:20:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "store_id",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "store_id",
														"type": "Int32",
														"physicalType": "INT_32"
													}
												},
												{
													"source": {
														"name": "store_name",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "store_name",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "phone",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "phone",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "email",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "email",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "street",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "street",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "city",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "city",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "state",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "state",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "zip_code",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "zip_code",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_bikestores_sales_stores_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_datalake_sales_stores_parquet",
											"type": "DatasetReference",
											"parameters": {
												"FechaProceso": {
													"value": "@substring(item().FechaProceso, 0, 10)",
													"type": "Expression"
												},
												"Contenedor": {
													"value": "@item().Contenedor",
													"type": "Expression"
												},
												"MedallaBronce": {
													"value": "@item().Medalla",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze/pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_configuracion_parametros')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_orchestrate_bronze')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_bikestore_production_brands",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "pl_bikestore_production_categories",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "pl_bikestore_production_products_daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "pl_bikestore_sales_customers_daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "pl_bikestore_sales_order_items_daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "pl_bikestore_sales_orders_daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "pl_bikestore_sales_staffs",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "pl_bikestore_sales_stores",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-11-10T16:00:00",
						"timeZone": "Central America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_bikestore_production_brands')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bikestore_production_categories')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bikestore_production_products_daily')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bikestore_sales_customers_daily')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bikestore_sales_order_items_daily')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bikestore_sales_orders_daily')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bikestore_sales_staffs')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bikestore_sales_stores')]"
			]
		}
	]
}